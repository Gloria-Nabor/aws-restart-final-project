AWSTemplateFormatVersion: 2010-09-09
Description: Lab template

# Lab VPC with public subnet and Internet Gateway

Parameters:

  LabVpcCidr:
    Type: String
    Default: 10.0.0.0/20

  PublicSubnetCidr:
    Type: String
    Default: 10.0.0.0/24

  AmazonLinuxAMIID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

  KeyName:
    Type: String
    Description: Keyname for the keypair that you will use to connect to the Web Server EC2 instance
    Default: default-lab-key

Resources:

###########
# VPC with Internet Gateway
###########

  LabVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref LabVpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Lab VPC

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Lab IGW

  VPCtoIGWConnection:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - IGW
      - LabVPC
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref LabVPC

###########
# Public Route Table
###########

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: LabVPC
    Properties:
      VpcId: !Ref LabVPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - PublicRouteTable
      - IGW
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref PublicRouteTable

###########
# Public Subnet
###########

  PublicSubnet:
    Type: AWS::EC2::Subnet
    DependsOn: LabVPC
    Properties:
      VpcId: !Ref LabVPC
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref PublicSubnetCidr
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: Public Subnet

  PublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicRouteTable
      - PublicSubnet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

###########
# EC2 Instance
###########

  WebServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmazonLinuxAMIID
      KeyName: !Ref KeyName
      InstanceType: t3.micro
      SecurityGroupIds:
        - !Ref WebSecurityGroup
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: Web Server
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ex
          hostnamectl set-hostname Web-Server
          yum install -y httpd
          echo '<html><h1>Hello from your web server!</h1>' > /var/www/html/index.html
          echo '<h2>AWS re/Start MXMEX9 | Coding Dojo</h2>' >> /var/www/html/index.html
          echo '<p>Proyecto: CafeCloudWeb</p>' >> /var/www/html/index.html
          echo '<h2>Integrantes:</h2>' >> /var/www/html/index.html
          echo '<ul>' >> /var/www/html/index.html
          echo '<li>Brenda Díaz</li>' >> /var/www/html/index.html
          echo '<li>Gloria Nabor</li>' >> /var/www/html/index.html
          echo '<li>Miriam Almanza</li>' >> /var/www/html/index.html
          echo '<li>Moisés Solorio</li>' >> /var/www/html/index.html
          echo '<li>Nancy Contreras</li>' >> /var/www/html/index.html
          echo '</ul></html>' >> /var/www/html/index.html
          systemctl enable httpd
          systemctl start httpd
          /opt/aws/bin/cfn-signal -s true '${WaitHandle}'

  WaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: WebServerInstance
    Properties:
      Handle: !Ref WaitHandle
      Timeout: '60'

###########
# Web Security Group
###########

  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: LabVPC
    Properties:
      GroupName: WebServerSG
      GroupDescription: Enable access to web server
      VpcId: !Ref LabVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '23'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: WebServerSG

###########
# S3
###########

  MyBucket:
    Type: AWS::S3::Bucket

###########
# Outputs
###########

Outputs:

  BucketName:
    Value: !Sub ${MyBucket}

  PublicIP:
    Value: !GetAtt
      - WebServerInstance
      - PublicIp
